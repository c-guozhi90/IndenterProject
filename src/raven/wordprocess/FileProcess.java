package raven.wordprocess;

import java.io.*;
import java.util.Stack;

public class FileProcess {
    /**
     * Insert specified character the head of a string
     */
    private BufferedWriter bw;
    private BufferedReader br;
    private File curFile;
    private String curLine;
    private String BufferString;

    public FileProcess(File curFile) throws IOException {
        if (!curFile.isFile()) {
            throw new FileNotFoundException("This is not a file!");
        }
        this.curFile = curFile;
        br = new BufferedReader(new FileReader(curFile));
        bw = new BufferedWriter(new FileWriter(curFile.getAbsolutePath() + ".temp")); // the writer writes string to temp file.
    }

    /**
     * Insert specified character into the head of each line. If the keyword stack is empty, insert zero character.
     * If the keyword stack has one element, insert one character; et cetera.
     *
     * @param c             Specified the character to be inserted, the default character should be \t.
     * @param keywordsStack the stack that storing keywords
     */
    public void insStringHead(char c, Stack<String> keywordsStack) {
        int count;
        String topKeyword = keywordsStack.peek();
        if (curLine.indexOf(topKeyword) > 0) {
            count = keywordsStack.size() - 1;
        } else {
            count = keywordsStack.size();
        }

        for (int insTimes = 0; insTimes < count; insTimes++) {
            curLine = c + curLine;
        }
    }


    /**
     * Replace the target file with the temp file just generated by this program
     */
    public static void replaceFile() {


    }

    /**
     * Write to temp file
     */
    public void writeToTemp() {

    }

    /**
     * split a line of string by spaces and return the words collection
     *
     * @return the words seperated by spaces
     */
    public String[] extractWords() throws IOException {
        curLine = br.readLine();
        if (curLine == null) {
            throw new EOFException();
        }
        String[] results = curLine.trim().split(" ");
        return results;
    }

    /**
     * Extract one line string without splitting
     */
    public String extractLine() throws IOException {
        curLine = br.readLine();
        if (curLine == null) {
            throw new EOFException();
        }
        return curLine;
    }

    public void close() {
        try {
            br.close();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String getCurLine() {
        return this.curLine;
    }

    private boolean isEmptyLine(String line) {
        return line.equals("\n");
    }
}
